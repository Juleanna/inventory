# test_enhanced_agent.py - –¢–µ—Å—Ç–æ–≤–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
import sys
import json
import logging
from pathlib import Path

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è —Ç–µ—Å—Ç—É
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)

def test_system_collector():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–±–æ—Ä—É —Å–∏—Å—Ç–µ–º–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó"""
    try:
        from enhanced_agent import EnhancedSystemCollector
        
        logger.info("üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è EnhancedSystemCollector...")
        collector = EnhancedSystemCollector()
        
        # –¢–µ—Å—Ç –∑–±–æ—Ä—É CPU —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
        logger.info("üìä –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–±–æ—Ä—É CPU —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó...")
        cpu_info = collector.get_detailed_cpu_info()
        logger.info(f"‚úÖ CPU: {cpu_info.get('name', 'Unknown')}")
        logger.info(f"   –Ø–¥—Ä–∞: {cpu_info.get('cores_physical', 0)} —Ñ—ñ–∑–∏—á–Ω–∏—Ö, {cpu_info.get('cores_logical', 0)} –ª–æ–≥—ñ—á–Ω–∏—Ö")
        
        # –¢–µ—Å—Ç –∑–±–æ—Ä—É –ø–∞–º'—è—Ç—ñ
        logger.info("üíæ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–±–æ—Ä—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø–∞–º'—è—Ç—å...")
        memory_info = collector.get_detailed_memory_info()
        total_gb = memory_info.get('total', 0) / (1024**3)
        logger.info(f"‚úÖ RAM: {total_gb:.1f} GB, –º–æ–¥—É–ª—ñ–≤: {len(memory_info.get('modules', []))}")
        
        # –¢–µ—Å—Ç –∑–±–æ—Ä—É –¥–∏—Å–∫—ñ–≤
        logger.info("üíø –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–±–æ—Ä—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –¥–∏—Å–∫–∏...")
        disk_info = collector.get_detailed_disk_info()
        partitions = disk_info.get('partitions', [])
        logger.info(f"‚úÖ –î–∏—Å–∫–∏: {len(partitions)} —Ä–æ–∑–¥—ñ–ª—ñ–≤")
        
        # –¢–µ—Å—Ç –∑–±–æ—Ä—É GPU
        logger.info("üéÆ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–±–æ—Ä—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ GPU...")
        gpu_info = collector.get_detailed_gpu_info()
        logger.info(f"‚úÖ GPU: {len(gpu_info)} –≤—ñ–¥–µ–æ–∫–∞—Ä—Ç")
        
        # –¢–µ—Å—Ç –∑–±–æ—Ä—É –º–µ—Ä–µ–∂—ñ
        logger.info("üåê –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–±–æ—Ä—É –º–µ—Ä–µ–∂–µ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó...")
        network_info = collector.get_network_adapters()
        logger.info(f"‚úÖ –ú–µ—Ä–µ–∂–∞: {len(network_info)} –∞–¥–∞–ø—Ç–µ—Ä—ñ–≤")
        
        # –¢–µ—Å—Ç –∑–±–æ—Ä—É –ü–ó
        logger.info("üì¶ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–±–æ—Ä—É –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ–≥–æ –ü–ó...")
        software_info = collector.get_installed_programs()
        logger.info(f"‚úÖ –ü–ó: {len(software_info)} –ø—Ä–æ–≥—Ä–∞–º")
        
        # –¢–µ—Å—Ç –∑–±–æ—Ä—É –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        logger.info("üìà –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–±–æ—Ä—É –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ...")
        performance_info = collector.get_system_performance_metrics()
        cpu_percent = performance_info.get('cpu', {}).get('percent_total', 0)
        memory_percent = performance_info.get('memory', {}).get('percent', 0)
        logger.info(f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: CPU {cpu_percent}%, RAM {memory_percent}%")
        
        return True
        
    except ImportError as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {e}")
        logger.error("   –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ: pip install -r requirements_enhanced.txt")
        return False
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–±–∏—Ä–∞—á–∞: {e}")
        return False

def test_agent_initialization():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∞–≥–µ–Ω—Ç–∞"""
    try:
        from enhanced_agent import EnhancedInventoryAgent
        
        logger.info("ü§ñ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∞–≥–µ–Ω—Ç–∞...")
        agent = EnhancedInventoryAgent()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–æ—ó –ë–î
        if agent.local_db_file.exists():
            logger.info("‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–∏—Ö —Å—Ç–≤–æ—Ä–µ–Ω–∞")
        else:
            logger.warning("‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–∞")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∞–≥–µ–Ω—Ç–∞: {e}")
        return False

def test_data_collection():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–±–æ—Ä—É –¥–∞–Ω–∏—Ö"""
    try:
        from enhanced_agent import EnhancedInventoryAgent
        
        logger.info("üìä –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∑–±–æ—Ä—É –¥–∞–Ω–∏—Ö...")
        agent = EnhancedInventoryAgent()
        
        # –ó–±—ñ—Ä –¥–∞–Ω–∏—Ö (–±–µ–∑ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä)
        data = agent.collect_comprehensive_data()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–∏—Ö –ø–æ–ª—ñ–≤
        required_fields = [
            'name', 'hostname', 'category', 'serial_number',
            'cpu_info', 'memory_info', 'disk_info', 'operating_system'
        ]
        
        missing_fields = []
        for field in required_fields:
            if field not in data:
                missing_fields.append(field)
        
        if missing_fields:
            logger.warning(f"‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ –ø–æ–ª—è: {missing_fields}")
        else:
            logger.info("‚úÖ –í—Å—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç–Ω—ñ")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑—ñ–±—Ä–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        logger.info(f"   –Ü–º'—è –∫–æ–º–ø'—é—Ç–µ—Ä–∞: {data.get('name', 'Unknown')}")
        logger.info(f"   –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {data.get('category', 'Unknown')}")
        logger.info(f"   –û–°: {data.get('operating_system', 'Unknown')}")
        logger.info(f"   –ß–∞—Å –∑–±–æ—Ä—É: {data.get('collection_duration', 0):.2f} —Å–µ–∫")
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
        test_file = Path("test_collected_data.json")
        with open(test_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, default=str, ensure_ascii=False)
        logger.info(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ {test_file}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–æ—Ä—É –¥–∞–Ω–∏—Ö: {e}")
        return False

def test_configuration():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""
    try:
        logger.info("‚öôÔ∏è –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó...")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–∞–π–ª—ñ–≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        config_example = Path(".env.enhanced.example")
        config_file = Path(".env.enhanced")
        
        if config_example.exists():
            logger.info("‚úÖ –§–∞–π–ª –ø—Ä–∏–∫–ª–∞–¥—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑–Ω–∞–π–¥–µ–Ω–æ")
        else:
            logger.warning("‚ö†Ô∏è –§–∞–π–ª .env.enhanced.example –≤—ñ–¥—Å—É—Ç–Ω—ñ–π")
        
        if config_file.exists():
            logger.info("‚úÖ –§–∞–π–ª –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑–Ω–∞–π–¥–µ–Ω–æ")
        else:
            logger.warning("‚ö†Ô∏è –§–∞–π–ª .env.enhanced –≤—ñ–¥—Å—É—Ç–Ω—ñ–π - —Å—Ç–≤–æ—Ä—ñ—Ç—å –∑ –ø—Ä–∏–∫–ª–∞–¥—É")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
        requirements_file = Path("requirements_enhanced.txt")
        if requirements_file.exists():
            logger.info("‚úÖ –§–∞–π–ª –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π –∑–Ω–∞–π–¥–µ–Ω–æ")
        else:
            logger.warning("‚ö†Ô∏è –§–∞–π–ª requirements_enhanced.txt –≤—ñ–¥—Å—É—Ç–Ω—ñ–π")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")
        return False

def test_dependencies():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π"""
    logger.info("üì¶ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...")
    
    required_modules = [
        ('psutil', '–°–∏—Å—Ç–µ–º–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è'),
        ('requests', 'HTTP –∑–∞–ø–∏—Ç–∏'),
        ('aiohttp', '–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ñ HTTP –∑–∞–ø–∏—Ç–∏'),
        ('tenacity', '–ü–æ–≤—Ç–æ—Ä–Ω—ñ —Å–ø—Ä–æ–±–∏'),
        ('decouple', '–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è'),
    ]
    
    optional_modules = [
        ('wmi', 'Windows Management Instrumentation'),
        ('GPUtil', 'GPU —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è'),
        ('cpuinfo', 'CPU —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è'),
        ('winreg', 'Windows Registry'),
    ]
    
    all_good = True
    
    # –û–±–æ–≤'—è–∑–∫–æ–≤—ñ –º–æ–¥—É–ª—ñ
    for module, description in required_modules:
        try:
            __import__(module)
            logger.info(f"‚úÖ {module}: {description}")
        except ImportError:
            logger.error(f"‚ùå {module}: {description} - –ù–ï –í–°–¢–ê–ù–û–í–õ–ï–ù–û")
            all_good = False
    
    # –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ –º–æ–¥—É–ª—ñ
    for module, description in optional_modules:
        try:
            __import__(module)
            logger.info(f"‚úÖ {module}: {description}")
        except ImportError:
            logger.warning(f"‚ö†Ô∏è {module}: {description} - –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)")
    
    return all_good

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞...")
    logger.info("=" * 50)
    
    tests = [
        ("–ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ", test_dependencies),
        ("–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è", test_configuration),
        ("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–≥–µ–Ω—Ç–∞", test_agent_initialization),
        ("–ó–±–∏—Ä–∞—á —Å–∏—Å—Ç–µ–º–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó", test_system_collector),
        ("–ó–±—ñ—Ä –¥–∞–Ω–∏—Ö", test_data_collection),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        logger.info(f"\n{'='*20} {test_name} {'='*20}")
        try:
            result = test_func()
            results.append((test_name, result))
            
            if result:
                logger.info(f"‚úÖ {test_name}: –£–°–ü–Ü–®–ù–û")
            else:
                logger.error(f"‚ùå {test_name}: –ü–û–ú–ò–õ–ö–ê")
                
        except Exception as e:
            logger.error(f"‚ùå {test_name}: –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê - {e}")
            results.append((test_name, False))
    
    # –ü—ñ–¥—Å—É–º–æ–∫
    logger.info(f"\n{'='*20} –ü–Ü–î–°–£–ú–û–ö {'='*20}")
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù–û" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù–û"
        logger.info(f"{test_name}: {status}")
    
    logger.info(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        logger.info("üéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ! –ê–≥–µ–Ω—Ç –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è.")
        return 0
    else:
        logger.error("‚ö†Ô∏è –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–æ–º–∏–ª–∫–∏ –≤–∏—â–µ.")
        return 1

if __name__ == "__main__":
    sys.exit(main())