version: '3.8'

services:
  # PostgreSQL база даних
  db:
    image: postgres:15-alpine
    container_name: inventory_db
    environment:
      POSTGRES_DB: inventory_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123456
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - inventory_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d inventory_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis для кешування та черг задач
  redis:
    image: redis:7-alpine
    container_name: inventory_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - inventory_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Django веб-додаток
  web:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: inventory_web
    ports:
      - "8000:8000"
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    environment:
      - DEBUG=False
      - ALLOWED_HOSTS=localhost,127.0.0.1,web
      - DATABASE_URL=postgresql://postgres:123456@db:5432/inventory_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - DB_HOST=db
      - DB_NAME=inventory_db
      - DB_USER=postgres
      - DB_PASSWORD=123456
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - inventory_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/admin/login/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery worker для фонових задач
  celery_worker:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: inventory_celery_worker
    command: celery -A inventory_project worker -l info
    environment:
      - DEBUG=False
      - DATABASE_URL=postgresql://postgres:123456@db:5432/inventory_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - DB_HOST=db
      - DB_NAME=inventory_db
      - DB_USER=postgres
      - DB_PASSWORD=123456
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - inventory_network
    restart: unless-stopped

  # Celery beat для планових задач
  celery_beat:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: inventory_celery_beat
    command: celery -A inventory_project beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    environment:
      - DEBUG=False
      - DATABASE_URL=postgresql://postgres:123456@db:5432/inventory_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - DB_HOST=db
      - DB_NAME=inventory_db
      - DB_USER=postgres
      - DB_PASSWORD=123456
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      web:
        condition: service_healthy
    networks:
      - inventory_network
    restart: unless-stopped

  # Nginx для статичних файлів та реверс-проксі (опціонально)
  nginx:
    image: nginx:alpine
    container_name: inventory_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - static_volume:/var/www/static
      - media_volume:/var/www/media
    depends_on:
      - web
    networks:
      - inventory_network
    restart: unless-stopped
    profiles:
      - production

# Мережа для всіх сервісів
networks:
  inventory_network:
    driver: bridge

# Томи для збереження даних
volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume: